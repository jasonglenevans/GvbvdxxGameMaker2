eval(atob("d2luZG93LnZtID0gewoJZGF5c1NpbmNlMjAwMDpmdW5jdGlvbiAoKSB7CgkJY29uc3QgbXNQZXJEYXkgPSAyNCAqIDYwICogNjAgKiAxMDAwOwoJCWNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoMjAwMCwgMCwgMSk7IC8vIE1vbnRocyBhcmUgMC1pbmRleGVkLgoJCWNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTsKCQljb25zdCBkc3RBZGp1c3QgPSB0b2RheS5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKTsKCQlsZXQgbVNlY3NTaW5jZVN0YXJ0ID0gdG9kYXkudmFsdWVPZigpIC0gc3RhcnQudmFsdWVPZigpOwoJCW1TZWNzU2luY2VTdGFydCArPSAoKHRvZGF5LmdldFRpbWV6b25lT2Zmc2V0KCkgLSBkc3RBZGp1c3QpICogNjAgKiAxMDAwKTsKCQlyZXR1cm4gbVNlY3NTaW5jZVN0YXJ0IC8gbXNQZXJEYXk7Cgl9LAoJaWRjb3VudGVyOjAsCglzdGFydFRpbWU6MCwKCXJlc2V0VGltZXI6KCkgPT4gewoJCXZtLnN0YXJ0VGltZSA9IHZtLmRheXNTaW5jZTIwMDAoKSo4NjQwMDsKCQl2bS5wcm9qZWN0LnRpbWVyID0gMDsKCX0sCgljb250cm9sOiB7CgkJc3RhcnQ6YXN5bmMgZnVuY3Rpb24gKGEpIHsKCQkJaWYgKHZtLmF1ZGlvRW5naW5lKSB7CgkJCQlpZiAodm0ucmVuZGVyZXIpIHsKCQkJCQlmb3IgKHZhciBuYW1lIG9mIHZtLnByb2plY3QucmVzb3VyY2VzKSB7CgkJCQkJCWlmICh2bS5wcm9qZWN0LnJlc291cmNlc1tuYW1lXS50eXBlID09ICJhdWRpbyIpIHsKCQkJCQkJCWF3YWl0IHZtLmF1ZGlvRW5naW5lLmFkZFRvUHJlbG9hZCh2bS5wcm9qZWN0LnJlc291cmNlc1tuYW1lXS5kYXRhKTsKCQkJCQkJfQoJCQkJCX0KCQkJCQl2bS5jb250cm9sLnN0b3AoKTsKCQkJCQl2bS5yZXNldFRpbWVyKCk7CgkJCQkJdm0uY29udHJvbC5ydW5uaW5nID0gdHJ1ZTsKCQkJCQl2bS5pZGNvdW50ZXIgPSAwOwoJCQkJCXZtLnByb2plY3QubW9uaXRvcnMgPSBbXTsKCQkJCQl3aW5kb3cudm0ucmVuZGVyZXIuY2FtZ2hvc3QgPSAwOwoJCQkJCXdpbmRvdy52bS5yZW5kZXJlci5iZy5zcmMgPSAiIjsKCQkJCQl0cnl7CgkJCQkJCS8qKgoJCQkJCQkgZnV0dXJlIHVwZGF0ZTogaSBtYXkgYWRkIGZldGNoIGJsb2NrcywKCQkJCQkJIHNvIGkgd2lsbCBuZWVkIGFzeW5jIGZ1bmN0aW9ucy4KCQkJCQkJKi8KCQkJCQkJZXZhbCh2bS5jb2RlKTsKCQkJCQl9Y2F0Y2goZSl7CgkJCQkJCXZtLmNvbnNvbGUuZXJyb3IoIkVycm9yIGluIHNjcmlwdDoiK2UpOwoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJdGhyb3cgRXJyb3IoIlJlbmRlcmVyIE11c3QgQmUgQXR0YWNoZWQiKTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXRocm93IEVycm9yKCJBdWRpb0VuZ2luZSBNdXN0IEJlIEF0dGFjaGVkIik7CgkJCX0KCQl9LAoJCXN0b3A6IGZ1bmN0aW9uICgpIHsKIAkJCWZvciAodmFyIGkgaW4gdm0ucHJvamVjdC50aW1lb3V0cykgewoJCQkJY2xlYXJUaW1lb3V0KHZtLnByb2plY3QudGltZW91dHNbaV0pOwoJCQl9CgkJCXZtLnByb2plY3QudGltZW91dHMgPSBbXTsKCQkJdm0uaWRjb3VudGVyID0gMDsKCQkJdm0uY29udHJvbC5ydW5uaW5nID0gZmFsc2U7CgkJCXZtLnByb2plY3Quc3ByaXRlcyA9IFtdOwoJCQl2bS5wcm9qZWN0LmV2ZW50cy50aWNrID0gW107CgkJCXZtLnByb2plY3Quc3ByaXRlcyA9IFtdOwoJCQl2bS5wcm9qZWN0LmtleXNQcmVzc2VkID0gW107CgkJCXZtLmF1ZGlvRW5naW5lLnN0b3AoKTsKCQkJdHJ5ewoJCQkJd2luZG93LnZtLm9uc3RvcCgpOwoJCQl9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihlKTt9CgkJfSwKCQlydW5uaW5nOmZhbHNlCgl9LAoJY29kZTogIiIsCglyZW5kZXJlcjpudWxsLAoJYXR0YWNoUmVuZGVyZXI6ZnVuY3Rpb24gKGEpIHsKCQl2bS5yZW5kZXJlciA9IGE7CgkJdm0ucmVuZGVyZXIuc3RhcnQoKTsKCQlyZXR1cm4gYTsKCX0sCglhdHRhY2hBdWRpb0VuZ2luZTpmdW5jdGlvbiAoYSkgewoJCXZtLmF1ZGlvRW5naW5lID0gYTsKCQlyZXR1cm4gYTsKCX0sCglzZXRDb21waWFkaWJsaXR5TW9kZTpmdW5jdGlvbiAoYSkgewoJCXRoaXMuY29tcGlhZGlibGl0eU1vZGUgPSBhOwoJfSwKCWNvbXBpYWRpYmxpdHlNb2RlOiBmYWxzZSwKCXByb2plY3Q6IHsKCQltb3VzZURvd246IGZhbHNlLAoJCW1vdXNlWDowLAoJCW1vdXNlWTowLAoJCWtleXNQcmVzc2VkOltdLAoJCXNwcml0ZXM6W10sCgkJZXZlbnRzOiB7CgkJCXRpY2s6IFtdCgkJfSwKCQltb25pdG9yczpbXSwKCQlyZXNvdXJjZXM6W10sCgkJdGltZXI6MCwKCQl0aW1lb3V0czpbXSwKCQlibG9jazp7CgkJCXRpY2tBc3luYzpmdW5jdGlvbiAoKSB7CgkJCQlyZXR1cm4gbmV3IFByb21pc2UoKGEpID0+IHsKCQkJCQlzZXRUaW1lb3V0KGEsMSk7CgkJCQl9KQoJCQl9LAoJCQl3YWl0QXN5bmM6ZnVuY3Rpb24gKHMpIHsKCQkJCXJldHVybiBuZXcgUHJvbWlzZSgoYSkgPT4gewoJCQkJCXZtLnByb2plY3QudGltZW91dHMucHVzaChzZXRUaW1lb3V0KGEscyoxMDAwKSk7CgkJCQl9KQoJCQl9LAoJCQltb3ZlU3RlcHM6ZnVuY3Rpb24gKHNwcml0ZSxzdGVwcykgewoJCQkJdHJ5ewoJCQkJdmFyIHJlYWxzdGVwcyA9IHN0ZXBzOwoJCQkJdmFyIHJlYWxkaXIgPSA5MC1zcHJpdGUuZGlyZWN0aW9uOwoJCQkJdmFyIHhCeSA9IE1hdGguY29zKHJlYWxkaXIgKiAoTWF0aC5QSS8xODApKSpyZWFsc3RlcHM7CgkJCQl2YXIgeUJ5ID0gTWF0aC5zaW4ocmVhbGRpciAqIChNYXRoLlBJLzE4MCkpKnJlYWxzdGVwczsKCQkJCXZhciByZWFseGJ5ID0geEJ5ICsgeEJ5OwoJCQkJc3ByaXRlLnggPSBzcHJpdGUueCArIHJlYWx4Ynk7CgkJCQlzcHJpdGUueSA9IHNwcml0ZS55ICsgKHlCeSt5QnkpOwoJCQkJfWNhdGNoKGUpe3ZtLmNvbnNvbGUuZXJyb3IoIkVycm9yIGluIHNjcmlwdDoiK2UpO30KCQkJfSwKCQkJZGVsZXRlTGlzdDpmdW5jdGlvbiAoYXJyYXksbnVtYmVyKSB7CgkJCQl0cnl7CgkJCQlkZWxldGUgYXJyYXlbbnVtYmVyXTsKCQkJCXZhciBpbmRleCA9IDA7CgkJCQl2YXIgZ2VuYXJhdGVkQXJyYXkgPSBbXTsKCQkJCXdoaWxlIChhcnJheS5sZW5ndGggPiBpbmRleCkgewoJCQkJCWlmICghKGFycmF5W2luZGV4XSA9PSB1bmRlZmluZWQpKSB7CgkJCQkJCWdlbmFyYXRlZEFycmF5LnB1c2goYXJyYXlbaW5kZXhdKTsKCQkJCQl9CgkJCQkJaW5kZXggKz0gMTsKCQkJCX0KCQkJCXJldHVybiBnZW5hcmF0ZWRBcnJheTsKCQkJCX1jYXRjaChlKXt2bS5jb25zb2xlLmVycm9yKCJFcnJvciBpbiBzY3JpcHQ6IitlKTt9CgkJCX0sCgkJCW1ha2VTcHJpdGU6ZnVuY3Rpb24gKCkgewoJCQkJdHJ5ewoJCQkJdm0uaWRjb3VudGVyICs9IDE7CgkJCQl2YXIgc3ByID0gewoJCQkJCWRpcmVjdGlvbjo5MCwKCQkJCQl4OjAsCgkJCQkJeTowLAoJCQkJCXdpZHRoOjMyLAoJCQkJCWhlaWdodDozMiwKCQkJCQlpbWFnZTpudWxsLAoJCQkJCWZsaXA6Im5vbmUiLAoJCQkJCWlkOnZtLmlkY291bnRlciwKCQkJCQlnaG9zdDowLAoJCQkJCWNsaWNrZWQ6IFtdCgkJCQl9OwoJCQkJdGhpcy5zaG93U3ByaXRlKHNwcik7CgkJCQlyZXR1cm4gc3ByOwoJCQkJdHJ5ewoJCQkJCXdpbmRvdy52bS5vbnNwcml0ZWNyZWF0ZShzcHIpOwoJCQkJfWNhdGNoKGUpe2NvbnNvbGUuZXJyb3IoZSk7fQoJCQkJfWNhdGNoKGUpe30KCgkJCX0sCgkJCW1ha2VNb25pdG9yOiBmdW5jdGlvbiAoKSB7CgkJCQl0cnl7CgkJCQl2YXIgbW9uaXRvciA9IHsKCQkJCQl4OjAsCgkJCQkJeTowLAoJCQkJCXZhbHVlOjAsCgkJCQkJbmFtZToibW9uaXRvciIsCgkJCQkJdmlzaWJsZTp0cnVlLAoJCQkJCWNsaWNrZWQ6IFtdCgkJCQl9OwoJCQkJd2luZG93LnZtLnByb2plY3QubW9uaXRvcnMucHVzaChtb25pdG9yKTsKCQkJCXJldHVybiBtb25pdG9yOwoJCQkJfWNhdGNoKGUpe3ZtLmNvbnNvbGUuZXJyb3IoIkVycm9yIGluIHNjcmlwdDoiK2UpO30KCQkJfSwKCQkJc2hvd1Nwcml0ZTpmdW5jdGlvbiAoc3ByKSB7CgkJCQl0cnl7CgkJCQkJdGhpcy5oaWRlU3ByaXRlKHNwcik7IC8vZW5zdXJlIHRoZXJlIGlzIG9ubHkgb25lIHNwcml0ZSB3aGVuIHNob3dpbmcgYWdhaW4uCgkJCQkJdm0ucHJvamVjdC5zcHJpdGVzLnB1c2goc3ByKTsKCQkJCX1jYXRjaChlKXt2bS5jb25zb2xlLmVycm9yKCJFcnJvciBpbiBzY3JpcHQ6IitlKTt9CgkJCX0sCgkJCWhpZGVTcHJpdGU6ZnVuY3Rpb24gKHNwcikgewoJCQkJdHJ5ewoJCQkJdmFyIGkgPSB2bS5wcm9qZWN0LnNwcml0ZXMuaW5kZXhPZihzcHIpOwoJCQkJaWYgKGkgPiAtMSkgewoJCQkJCXZtLnByb2plY3Quc3ByaXRlcy5zcGxpY2UoaSwgMSk7IC8vIDJuZCBwYXJhbWV0ZXIgbWVhbnMgcmVtb3ZlIG9uZSBpdGVtIG9ubHkKCQkJCX0KCQkJCX1jYXRjaChlKXt9CgkJCX0sCgkJCWNvczpmdW5jdGlvbiAobnVtYmVyKSB7CgkJCQl0cnl7CgkJCQlyZXR1cm4gTWF0aC5jb3MoKG51bWJlcikqIChNYXRoLlBJLzE4MCkpOwoJCQkJfWNhdGNoKGUpe3ZtLmNvbnNvbGUuZXJyb3IoZSk7fQoJCQl9LAoJCQlzaW46ZnVuY3Rpb24gKG51bWJlcikgewoJCQkJdHJ5ewoJCQkJcmV0dXJuIE1hdGguc2luKChudW1iZXIpKiAoTWF0aC5QSS8xODApKTsKCQkJCX1jYXRjaChlKXt2bS5jb25zb2xlLmVycm9yKGUpO30KCQkJfSwKCQkJZ2V0TW9zZURhdGE6ZnVuY3Rpb24gKCkgewoJCQkJdHJ5ewoJCQkJcmV0dXJuIHsKCQkJCQl4OnZtLnByb2plY3QubW91c2VYLAoJCQkJCXk6dm0ucHJvamVjdC5tb3VzZVksCgkJCQkJZG93bjp2bS5wcm9qZWN0Lm1vdXNlRG93bgoJCQkJfTsKCQkJCX1jYXRjaChlKXt9CgkJCX0sCgkJCWRhdGFUb0ltZzpmdW5jdGlvbiAoZGF0YVVSSSkgewoJCQkJdHJ5ewoJCQkJdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImltZyIpOwoJCQkJaW1nLnNyYyA9IGRhdGFVUkk7CgkJCQlpbWcuc2V0QXR0cmlidXRlKCJzdHlsZSIsImltYWdlLXJlbmRlcmluZzogcGl4ZWxhdGVkOyIpOwoJCQkJcmV0dXJuIGltZzsKCQl9Y2F0Y2goZSl7fQoJCQl9LAoJCQlyYW5kb206IGZ1bmN0aW9uIChhLCBiKSB7CgkJCSAgaWYgKGEgPiBiKSB7CgkJCQkvLyBTd2FwIGEgYW5kIGIgdG8gZW5zdXJlIGEgaXMgc21hbGxlci4KCQkJCXZhciBjID0gYTsKCQkJCWEgPSBiOwoJCQkJYiA9IGM7CgkJCSAgfQoJCQkgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoYiAtIGEgKyAxKSArIGEpOwoJCQl9LAoJCQlpc1RvdWNoaW5nOiBmdW5jdGlvbiAoc3ByaXRlMSxzcHJpdGUyLCBtb2RlKSB7CgkJCQkvKmlmIChzcDEueCA+IHNwMi54KSB7CgkJCQkJdmFyIGRldmlkZU51bVggPSAtMjsKCQkJCX0gZWxzZSB7CgkJCQkJdmFyIGRldmlkZU51bVggPSAyOwoJCQkJfQoJCQkJc3AxLnggLT0gc3AxLndpZHRoL2RldmlkZU51bVg7CgkJCQl2YXIgcmVzID0gKAoJCQkJc3AxLnggPCBzcDIueCArIChzcDIud2lkdGgvMSkgJiYKCQkJCXNwMS54ICsgKHNwMS53aWR0aC8xKSA+IHNwMi54ICYmCgkJCQlzcDEueSA8IHNwMi55ICsgc3AyLmhlaWdodCAmJgoJCQkJc3AxLmhlaWdodCArIHNwMS55ID4gc3AyLnkKCQkJCSk7CgkJCQlzcDEueCArPSBzcDEud2lkdGgvZGV2aWRlTnVtWDsKCQkJCXJldHVybiByZXM7Ki8KCQkJCXRyeXsKCQkJCXJldHVybiB2bS5fX19DSEVDS0NPTExJREUoc3ByaXRlMSxzcHJpdGUyKTsKCQkJCX1jYXRjaChlKXt2bS5jb25zb2xlLmVycm9yKCJFcnJvciBpbiBzY3JpcHQ6IitlKTt9CgkJCX0sCgkJCWdldEtleVByZXNzZWQ6IGZ1bmN0aW9uIChrZXluYW1lKSB7CgkJCQl0cnl7CgkJCQlpZiAodm0ucHJvamVjdC5rZXlzUHJlc3NlZFtrZXluYW1lXSkgewoJCQkJCXJldHVybiB0cnVlOwoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCQl9Y2F0Y2goZSl7fQoJCQl9LAoJCQl3YWl0OmZ1bmN0aW9uIChzZWNzLGNhbGxiYWNrKSB7CgkJCQl0cnl7CgkJCQkJLyoqVXBkYXRlIEZvciBWMS41LjAhCgkJCQkJRml4ZWQgQSBCdWcgV2hlcmUgSWYgWW91IFN0b3AgVGhlIFByb2plY3QgQW5kIFJ1biBJdCwKCQkJCQlBbGwgVGhlIFdhaXRzIFdpbGwgUnVuIElmIFRoZXkgQXJlIE5vdCBPdmVyIFlldC4KCQkJCQlUbyBGaXggVGhpcywgSSBVc2VkIEFuIGNsZWFyVGltZW91dCgpIEZ1bmN0aW9uIEZvciBFYWNoIE9uZS4KCQkJCQkqLwoJCQkJCXZtLnByb2plY3QudGltZW91dHMucHVzaChzZXRUaW1lb3V0KCgpID0+IHsKCQkJCQkJaWYgKHdpbmRvdy52bS5jb250cm9sLnJ1bm5pbmcpIHsKCQkJCQkJCWNhbGxiYWNrKCk7CgkJCQkJCX0KCQkJCQl9LHNlY3MqMTAwMCkpOyAvKjEwMDBtcyA9IDEgc2Vjb25kKi8KCQkJCX1jYXRjaChlKXt9CgkJCX0sCgkJCWdldFRvdWNoTW91c2U6IGZ1bmN0aW9uIChzcHIpIHsKCQkJCXJldHVybiB3aW5kb3cudm0uX19fQ0hFQ0tDT0xMSURFKHt4OndpbmRvdy52bS5wcm9qZWN0Lm1vdXNlWCx5OndpbmRvdy52bS5wcm9qZWN0Lm1vdXNlWSx3aWR0aDoxLGhlaWdodDoxfSxzcHIpOwoJCQl9LAoJCQljaGFuZ2VDb2xvckVmZmVjdDpmdW5jdGlvbiAoaW1nLHIsZyxiKSB7CgkJCQlpbWcuc3JjID0gd2luZG93LnZtLnJlbmRlcmVyLmdldENvbG9yRWZmZWN0KGltZyxyLGcsYik7CgkJCX0sCgkJCW1pY1ZvbHVtZTpmdW5jdGlvbiAoKSB7CgkJCQlpZiAod2luZG93LnZtLnJlbmRlcmVyLmNhbXJ1bikgewoJCQkJCXJldHVybiB3aW5kb3cudm0ucmVuZGVyZXIubWljdm9sOwoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4gMDsKCQkJCX0KCQkJfSwKCQkJb3BlbkNhbWVyYTpmdW5jdGlvbiAoKSB7CgkJCQl3aW5kb3cudm0ucmVuZGVyZXIuc3RhcnRDYW1lcmFTdHJlYW0oKTsKCQkJfSwKCQkJc3RvcENhbWVyYTpmdW5jdGlvbiAoKSB7CgkJCQl3aW5kb3cudm0ucmVuZGVyZXIuc3RvcENhbWVyYVN0cmVhbSgpOwoJCQl9CgkJfQoJfSwKCXZhcmlhYmxlczp7CgkJY2FuRHJhZzpmYWxzZQoJfSwKCXZtVGljazogZnVuY3Rpb24gKCkgewoJCWlmICh2bS5jb250cm9sLnJ1bm5pbmcpIHsKCQkJdm0ucHJvamVjdC50aW1lciA9ICh2bS5kYXlzU2luY2UyMDAwKCkqODY0MDApLXZtLnN0YXJ0VGltZTsKCQkJZm9yICh2YXIgaSBpbiB2bS5wcm9qZWN0LmV2ZW50cy50aWNrKSB7CgkJCQl0cnl7CgkJCQkJdm0ucHJvamVjdC5ldmVudHMudGlja1tpXSgpCgkJCQl9Y2F0Y2goZSl7dm0uY29uc29sZS5lcnJvcihlKTt9CgkJCX0KCQkJdHJ5ewoJCQkJdm0ucmVuZGVyZXIudGljayh2bS5wcm9qZWN0LnNwcml0ZXMsdm0ucHJvamVjdC5tb25pdG9ycyk7CgkJCX1jYXRjaChlKXt9CgkJCXRoaXMudGlja3MgKz0gMDsKCQkJdHJ5ewoJCQkJd2luZG93LnZtLm9udGljaygpOwoJCQl9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihlKTt9CgkJfSBlbHNlIHsKCQkJdGhpcy50aWNrcyA9IDA7CgkJfQoJCXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodm0udm1UaWNrKTsKCX0sCglzdGFydDpmdW5jdGlvbiAoKSB7CgkJdm0uY29udHJvbC5zdGFydCgpOwoJfSwKCXN0b3A6ZnVuY3Rpb24gKCkgewoJCXZtLmNvbnRyb2wuc3RvcCgpOwoJfSwKCXNldE1vdXNlUG9zOiBmdW5jdGlvbiAoZGF0YSkgewoJCXRoaXMucHJvamVjdC5tb3VzZVggPSBkYXRhLng7CgkJdGhpcy5wcm9qZWN0Lm1vdXNlWSA9IGRhdGEueTsKCX0sCglzZXRNb3VzZURvd246IGZ1bmN0aW9uIChkYXRhKSB7CgkJaWYgKGRhdGEgPT0gdHJ1ZSkgewoJCQlmb3IgKHZhciBpIGluIHZtLnByb2plY3Quc3ByaXRlcykgewoJCQkJdHJ5ewoJCQkJCWlmICh0aGlzLl9fX0NIRUNLQ09MTElERSh7eDp0aGlzLnByb2plY3QubW91c2VYLHk6dGhpcy5wcm9qZWN0Lm1vdXNlWSx3aWR0aDoxLGhlaWdodDoxfSx2bS5wcm9qZWN0LnNwcml0ZXNbaV0pKSB7CgkJCQkJCXZhciBjdXJyZW50U3ByaXRlID0gdm0ucHJvamVjdC5zcHJpdGVzW2ldOwoJCQkJCQlmb3IgKHZhciBpMiBpbiBjdXJyZW50U3ByaXRlLmNsaWNrZWQpIHsKCQkJCQkJCXRyeXsKCQkJCQkJCQljdXJyZW50U3ByaXRlLmNsaWNrZWRbaTJdKCkKCQkJCQkJCX1jYXRjaChlKXt2bS5jb25zb2xlLmVycm9yKGUpO30KCQkJCQkJfQoJCQkJCQkvL2NvbnNvbGUubG9nKCJjbGlja2VkIHNwcml0ZS4iKTsKCQkJCQl9CgkJCQl9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihlKTt9CgkJCX0KCQl9CgkJdGhpcy5wcm9qZWN0Lm1vdXNlRG93biA9IGRhdGE7Cgl9LAoJY29uc29sZTogewoJCWxvZzogZnVuY3Rpb24gKHRleHQpIHsKCQkJY29uc29sZS5sb2coIlt2bSAtIHByb2dyYW1dOiAiICsgdGV4dCk7CgkJfSwKCQllcnJvcjogZnVuY3Rpb24gKHRleHQpIHsKCQkJY29uc29sZS5lcnJvcigiW3ZtIC0gcHJvZ3JhbV06ICIgKyB0ZXh0KTsKCQkJdm0uc3RvcCgpOwoJCX0sCgkJY2xlYXI6IGZ1bmN0aW9uICh0ZXh0KSB7CgkJCWNvbnNvbGUuY2xlYXIoKTsKCQl9Cgl9LAoJc2ltdWxhdGVLZXk6IGZ1bmN0aW9uIChkYXRhKSB7CgkJaWYgKGRhdGEuZG93bikgewoJCQl0aGlzLnByb2plY3Qua2V5c1ByZXNzZWRbZGF0YS5rZXldID0gdHJ1ZTsKCQl9IGVsc2UgewoJCQl0aGlzLnByb2plY3Qua2V5c1ByZXNzZWRbZGF0YS5rZXldID0gZmFsc2U7CgkJfQoJfSwKCWNvbGxpZGVXaWR0aDowLAoJY29sbGlkZUhlaWdodDowLAoJX19fQ0hFQ0tDT0xMSURFOmZ1bmN0aW9uIChzcHIxLHNwcjIpewoJCXJldHVybiBmYWxzZTsKCX0sCgljb2xsaWRlRGl2OmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLAoJYWRkRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbiAobmFtZSxldmVudE5hbWUpIHsKCQl0aGlzWyJvbiIrbmFtZV0gPSBldmVudE5hbWU7Cgl9LAoJb250aWNrOiBmdW5jdGlvbigpe30sCglvbnNwcml0ZWNyZWF0ZTogZnVuY3Rpb24oc3ByaXRlKXt9LAoJb25zdG9wOiBmdW5jdGlvbigpe30sCglfX2RlY29kZURhdGFCYXNlNjRVUkk6IGZ1bmN0aW9uIChkYXRhVVJJKSB7CgkJcmV0dXJuIGF0b2IoZGF0YVVSSS5zcGxpdCgiOyIpLnBvcCgpLnNwbGl0KCIsIikucG9wKCkpOwoJfQp9CnZtLl9fX0NIRUNLQ09MTElERSA9IGZ1bmN0aW9uIGlzQ29sbGlkZShhMiwgYjIpIHsKCWZ1bmN0aW9uIGdldFJlYWxDYW52YXNQb3MoeCx5LHdpZHRoLGhlaWdodCxjYW52YXMpIHsKCQl2YXIgbWFpblggPSB4LSh3aWR0aC8yKTsKCQl2YXIgbWFpblkgPSB5LShoZWlnaHQvMik7CgkJcmV0dXJuIHsKCQkJeDptYWluWC0oY2FudmFzLndpZHRoLzIpLAoJCQl5Om1haW5ZLShjYW52YXMuaGVpZ2h0LzIpCgkJfTsKCX0KCXZhciBhID0gewoJCXdpZHRoOmEyLndpZHRoLzIsCgkJaGVpZ2h0OmEyLmhlaWdodCwKCQl4OmdldFJlYWxDYW52YXNQb3MoYTIueCxhMi55LGEyLndpZHRoLzIsYTIuaGVpZ2h0LHZtLnJlbmRlcmVyLmNhbnZhcykueCwKCQl5OmdldFJlYWxDYW52YXNQb3MoYTIueCxhMi55LGEyLndpZHRoLzIsYTIuaGVpZ2h0LHZtLnJlbmRlcmVyLmNhbnZhcykueQoJfTsKCXZhciBiID0gewoJCXdpZHRoOmIyLndpZHRoLzIsCgkJaGVpZ2h0OmIyLmhlaWdodCwKCQl4OmdldFJlYWxDYW52YXNQb3MoYjIueCxiMi55LGIyLndpZHRoLzIsYjIuaGVpZ2h0LHZtLnJlbmRlcmVyLmNhbnZhcykueCwKCQl5OmdldFJlYWxDYW52YXNQb3MoYjIueCxiMi55LGIyLndpZHRoLzIsYjIuaGVpZ2h0LHZtLnJlbmRlcmVyLmNhbnZhcykueQoJfTsKCXZhciByZXN1bHQgPSAoCgkJYS54ICsgYS53aWR0aCA+PSBiLnggJiYKCQlhLnggPD0gYi54ICsgYi53aWR0aCAmJgoJCWEueSArIGEuaGVpZ2h0ID49IGIueSAmJgoJCWEueSA8PSBiLnkgKyBiLmhlaWdodAogICAgKTsKCS8qaWYgKGEyLmltYWdlKSB7CgkJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhMi5pbWFnZSk7CgkJYTIuaW1hZ2Uuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnOwoJCWEyLmltYWdlLnN0eWxlLnRvcCA9IGEyLnkrKHZtLnJlbmRlcmVyLmNhbnZhcy5oZWlnaHQgLyAyKSsncHgnOwoJCWEyLmltYWdlLnN0eWxlLmxlZnQgPSBhMi54Kyh2bS5yZW5kZXJlci5jYW52YXMud2lkdGggLyAyKSsncHgnOwoJCWEyLmltYWdlLndpZHRoID0gYTIud2lkdGg7CgkJYTIuaW1hZ2UuaGVpZ2h0ID0gYTIuaGVpZ2h0OwoJfQoJaWYgKGIyLmltYWdlKSB7CgkJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChiMi5pbWFnZSk7CgkJYjIuaW1hZ2Uuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnOwoJCWIyLmltYWdlLnN0eWxlLnRvcCA9IGIyLnkrKHZtLnJlbmRlcmVyLmNhbnZhcy5oZWlnaHQgLyAyKSsncHgnOwoJCWIyLmltYWdlLnN0eWxlLmxlZnQgPSBiMi54Kyh2bS5yZW5kZXJlci5jYW52YXMud2lkdGggLyAyKSsncHgnOwoJCWIyLmltYWdlLndpZHRoID0gYjIud2lkdGg7CgkJYjIuaW1hZ2UuaGVpZ2h0ID0gYjIuaGVpZ2h0OwoJfSovCiAgICByZXR1cm4gcmVzdWx0Owp9Owp3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHZtLnZtVGljayk7Ci8qClRFU1QgU0NSSVBUUzoKd2hpbGUgaW4gZGV2bG9wbWVudCBpIHJhbiBjb2RlIHRvIGNoZWNrIGlmIGV2ZXJ5dGhpbmcgaXMgd29ya2luZy4KYmFzaWMgdGVzdDoKdmFyIHNwcml0ZSA9IHZtLnByb2plY3QuYmxvY2subWFrZVNwcml0ZSgpOwpzcHJpdGUuaW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidGVzdEltYWdlIik7CgpoaWRlIHNwcml0ZSB0ZXN0OgoKdm0ucHJvamVjdC5ibG9jay5oaWRlU3ByaXRlKHNwcml0ZSk7CgpzZWNvbmQgc3ByaXRlIHRlc3Q6Cgp2YXIgc3ByaXRlMiA9IHZtLnByb2plY3QuYmxvY2subWFrZVNwcml0ZSgpOwpzcHJpdGUyLmltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRlc3RJbWFnZSIpOwoKcm90YXRpbmcgc3ByaXRlIHRlc3Q6CnZhciBzcHJpdGUzID0gdm0ucHJvamVjdC5ibG9jay5tYWtlU3ByaXRlKCk7CnNwcml0ZTMuaW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidGVzdEltYWdlIik7CnZtLnByb2plY3QuZXZlbnRzLnRpY2sucHVzaChmdW5jdGlvbiAoKSB7CglzcHJpdGUzLmRpcmVjdGlvbiArPSAxOwp9KTsKKi8="));eval(atob(""));eval(atob(""));